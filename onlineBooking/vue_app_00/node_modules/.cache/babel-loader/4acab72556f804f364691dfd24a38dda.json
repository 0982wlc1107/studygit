{"remainingRequest":"c:\\xampp\\htdocs\\tml1903\\16VUE UI\\day05\\day05\\vue_app_00\\node_modules\\babel-loader\\lib\\index.js!c:\\xampp\\htdocs\\tml1903\\16VUE UI\\day05\\day05\\vue_app_00\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!c:\\xampp\\htdocs\\tml1903\\16VUE UI\\day05\\day05\\vue_app_00\\src\\components\\xz\\Cart.vue?vue&type=script&lang=js","dependencies":[{"path":"c:\\xampp\\htdocs\\tml1903\\16VUE UI\\day05\\day05\\vue_app_00\\src\\components\\xz\\Cart.vue","mtime":1562306811966},{"path":"c:\\xampp\\htdocs\\tml1903\\16VUE UI\\day05\\day05\\vue_app_00\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1534853416000},{"path":"c:\\xampp\\htdocs\\tml1903\\16VUE UI\\day05\\day05\\vue_app_00\\node_modules\\babel-loader\\lib\\index.js","mtime":1529635966000},{"path":"c:\\xampp\\htdocs\\tml1903\\16VUE UI\\day05\\day05\\vue_app_00\\node_modules\\vue-loader\\lib\\index.js","mtime":1527860006000}],"contextDependencies":[],"result":["import \"core-js/modules/es7.symbol.async-iterator\";\nimport \"core-js/modules/es6.symbol\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.iterator\";\nimport \"core-js/modules/es6.promise\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  data: function data() {\n    return {\n      list: []\n    };\n  },\n  methods: {\n    // 加载购物车列表\n    loadMore: function loadMore() {\n      var _this = this;\n\n      // 先清空购物车数量\n      // 不清空的话，数量会追加 \n      this.$store.commit(\"clearCount\");\n      var url = \"cart\"; // 登录后的uid在接口中获得\n\n      this.axios.get(url).then(function (result) {\n        // console.log(result.data);\n        // this.list=result.data.data;\n        // 1. 获取服务器数组\n        var rows = result.data.data; // 2. 创建循环为数组中每个对象添加cb属性 cb控制商品前复选框\n\n        var _iteratorNormalCompletion = true;\n        var _didIteratorError = false;\n        var _iteratorError = undefined;\n\n        try {\n          for (var _iterator = rows[Symbol.iterator](), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n            var item = _step.value;\n            // 2.1 添加cb属性\n            item.cb = false; // 2.2 更新购物车数量\n\n            _this.$store.commit(\"increment\");\n          } // 3. 将新数据保存\n\n        } catch (err) {\n          _didIteratorError = true;\n          _iteratorError = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion && _iterator.return != null) {\n              _iterator.return();\n            }\n          } finally {\n            if (_didIteratorError) {\n              throw _iteratorError;\n            }\n          }\n        }\n\n        _this.list = rows;\n      });\n    },\n    // 全选购物车列表\n    selectALL: function selectALL(e) {\n      // 要拿到当前复选框的状态，只能用事件对象获得\n      // e.target.checked  false true\n      // 获得全选按钮的状态\n      var cb = e.target.checked; // 循环让每一个复选框的cb属性和全选复选框的状态一致\n\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = this.list[Symbol.iterator](), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var item = _step2.value;\n          item.cb = cb;\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n    },\n    // 删除选中的一个商品\n    delItem: function delItem(e) {\n      var _this2 = this;\n\n      // 1. 获取当前商品Id\n      var id = parseInt(e.target.dataset.id); // 2. 显示交互确认框 异步操作，不等你操作完，就会往下执行\n\n      this.$messagebox.confirm(\"是否删除\").then(function (active) {\n        console.log(active); // 3. 如果用户选择了\"确定\"\n        // 4. 发送ajax删除数据\n        // 5. 如果用户选择\"取消\"\n\n        _this2.axios.get(\"delItem\", {\n          params: {\n            id: id\n          }\n        }).then(function (result) {\n          // 重新加载数据\n          _this2.loadMore();\n        });\n      }).catch(function (err) {\n        console.log(err);\n      });\n      console.log(id);\n    },\n    // 删除选中的多个商品\n    delItems: function delItems() {\n      var _this3 = this;\n\n      var ids = [];\n      var _iteratorNormalCompletion3 = true;\n      var _didIteratorError3 = false;\n      var _iteratorError3 = undefined;\n\n      try {\n        for (var _iterator3 = this.list[Symbol.iterator](), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n          var item = _step3.value;\n\n          // console.log(item);\n          if (item.cb) {\n            ids.push(item.id);\n          }\n        }\n      } catch (err) {\n        _didIteratorError3 = true;\n        _iteratorError3 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n            _iterator3.return();\n          }\n        } finally {\n          if (_didIteratorError3) {\n            throw _iteratorError3;\n          }\n        }\n      }\n\n      ids = ids.join(\",\");\n      console.log(ids); // console.log(ids);\n\n      if (ids) {\n        //如果选中了商品，ids为真，则执行删除操作\n        this.$messagebox.confirm(\"是否删除选中的商品\").then(function (active) {\n          // console.log(active);\n          // 当用户点击确认后，发送axios请求\n          _this3.axios.get(\"delItems\", {\n            params: {\n              ids: ids\n            }\n          }).then(function (result) {\n            // 删除后，重新加载购物车列表\n            _this3.loadMore();\n          });\n        }).catch(function (err) {\n          console.log(err);\n        });\n      } else {\n        //否则，没有选中商品，ids为空为false，发送提示信息\n        this.$toast(\"请选择需要删除的商品\");\n      }\n    }\n  },\n  created: function created() {\n    // 调用当前组件的函数，需要添加this\n    this.loadMore();\n  }\n};",{"version":3,"sources":["Cart.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\r\n  <div>\r\n    <!--Cart.vue-->\r\n    <div class=\"cart\">\r\n      <h3>购物车数量：<span style=\"color:red\">{{$store.getters.getCartCount}}</span></h3>\r\n      <div class=\"selectAll\">\r\n        <!--全选-->\r\n        <!--改变状态时，触发事件  @change-->\r\n        全选<input type=\"checkbox\" @change=\"selectALL\">\r\n      </div>\r\n      <div class=\"cart-item\" v-for=\"(item,i) of list\" :key=\"i\">\r\n        <!--商品列表-->\r\n        <div class=\"leftImgText\">\r\n          <!--双向绑定cb属性，控制checked状态-->\r\n          <input type=\"checkbox\" v-model=\"item.cb\">\r\n          <img :src=\"'http://127.0.0.1:3000/img/'+item.img_url\">\r\n          <div class=\"price\">\r\n            <span>{{item.price.toFixed(2)}}</span>\r\n          </div>\r\n        </div>\r\n        <!--利用自定义属性传id-->\r\n        <mt-button @click=\"delItem\" :data-id=\"item.id\">删除</mt-button>\r\n      </div>\r\n      <div>\r\n        <!--删除选中商品-->\r\n        <mt-button size=\"large\" @click=\"delItems\">删除选中的商品</mt-button>\r\n      </div>\r\n    </div>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\n  export default {\r\n    data(){\r\n      return {\r\n        list:[],\r\n      }\r\n    },\r\n    methods:{\r\n      // 加载购物车列表\r\n      loadMore(){\r\n        // 先清空购物车数量\r\n        // 不清空的话，数量会追加 \r\n        this.$store.commit(\"clearCount\");\r\n        var url=\"cart\";\r\n        // 登录后的uid在接口中获得\r\n        this.axios.get(url).then(result=>{\r\n          // console.log(result.data);\r\n          // this.list=result.data.data;\r\n          // 1. 获取服务器数组\r\n          var rows=result.data.data;\r\n          // 2. 创建循环为数组中每个对象添加cb属性 cb控制商品前复选框\r\n          for(var item of rows){\r\n            // 2.1 添加cb属性\r\n            item.cb=false;\r\n            // 2.2 更新购物车数量\r\n            this.$store.commit(\"increment\");\r\n          }\r\n          // 3. 将新数据保存\r\n          this.list=rows;\r\n        })\r\n      },\r\n      // 全选购物车列表\r\n      selectALL(e){\r\n        // 要拿到当前复选框的状态，只能用事件对象获得\r\n        // e.target.checked  false true\r\n        // 获得全选按钮的状态\r\n        var cb=e.target.checked;\r\n        // 循环让每一个复选框的cb属性和全选复选框的状态一致\r\n        for(var item of this.list){\r\n          item.cb=cb;\r\n        }\r\n      },\r\n      // 删除选中的一个商品\r\n      delItem(e){\r\n        // 1. 获取当前商品Id\r\n        var id=parseInt(e.target.dataset.id);\r\n        // 2. 显示交互确认框 异步操作，不等你操作完，就会往下执行\r\n        this.$messagebox.confirm(\"是否删除\").then(active=>{\r\n          console.log(active);\r\n          // 3. 如果用户选择了\"确定\"\r\n          // 4. 发送ajax删除数据\r\n          // 5. 如果用户选择\"取消\"\r\n          this.axios.get(\"delItem\",{params:{id}}).then(result=>{\r\n            // 重新加载数据\r\n            this.loadMore();\r\n          })\r\n        }).catch(err=>{\r\n          console.log(err);\r\n        });\r\n        console.log(id);\r\n      },\r\n      // 删除选中的多个商品\r\n      delItems(){\r\n        var ids=[];\r\n        for(var item of this.list){\r\n          // console.log(item);\r\n          if(item.cb){\r\n            ids.push(item.id);\r\n          }\r\n        }\r\n        ids=ids.join(\",\");\r\n        console.log(ids);\r\n        // console.log(ids);\r\n        if(ids){  //如果选中了商品，ids为真，则执行删除操作\r\n          this.$messagebox.confirm(\"是否删除选中的商品\").then(active=>{\r\n            // console.log(active);\r\n            // 当用户点击确认后，发送axios请求\r\n            this.axios.get(\"delItems\",{params:{ids}}).then(result=>{\r\n              // 删除后，重新加载购物车列表\r\n              this.loadMore();\r\n            })\r\n          }).catch(err=>{\r\n            console.log(err)\r\n          })\r\n        }else{ //否则，没有选中商品，ids为空为false，发送提示信息\r\n          this.$toast(\"请选择需要删除的商品\");\r\n        }\r\n      }\r\n    },\r\n    created(){\r\n      // 调用当前组件的函数，需要添加this\r\n      this.loadMore();\r\n    }\r\n  }\r\n</script>\r\n\r\n<style scoped>\r\n.cart{\r\n  padding:10px;\r\n}\r\n.cart h3{\r\n   background-color:#f6f8fa;\r\n   height:40px;\r\n   line-height:40px;\r\n}\r\n/* 最外层的弹性布局 */\r\n.cart-item{\r\n  display:flex;\r\n  justify-content:space-between;\r\n  align-items:center;\r\n}\r\n.leftImgText{\r\n  /* 默认子元素水平对齐 */\r\n  display:flex;\r\n  align-items:center;\r\n}\r\n.leftImgText img{\r\n  width:50px;\r\n  height:50px;\r\n}\r\n.price{\r\n  margin-left:10px;\r\n}\r\n</style>"],"sourceRoot":"src\\components\\xz"}]}